eitan.rab, davidkalech
Eitan Rabinovich 318894763, David Kalech 206555070
EX: 2

FILES:
uthreads.cpp -- an implementation of a thread library in C++,
                including a main thread and additional threads with different
                states, quantum time, and sleep capability. The code includes
                signal handling for timer interrupts and a ready queue for
                scheduling threads.

REMARKS:

ANSWERS:
1.	A. sigsetjmp – a function that enable the programmer to save the state of
 a current process. It receives an empty buffer to save in it the state. And
 can be later used by Siglongjmp to restore the process. It can also save the
  signal mask of the process.
Siglongjmp - a function that enable the programmer to restore a previous state
 saved by sigsetjmp.
B. if the functions gets a non-zero second argument it saves (sigsetjmp) and
restore (Siglongjmp) the signal mask along with execution context.
2.	Consider a video game where many objects simultaneously needs to calculate
 positions and physics interactions. Using user level threads enable us to
 calculate those things simultaneously. Using user level threads is best
 because we donwt need access to the kernel mode, and we get the benefit of
 less overhead.
3.	The disadvantage of a new process is more overhead due to the extra word
needing of moving between processes (global variables for example).
The advantage is that if we create new process we broaden between the tabs so
if we have an error in tab it will only terminate the current tab (process)
and not all the other tabs.
4.	When we execute the "kill" command, a signal is sent to the process with
the specified pid. In this case, we send the signal to Shotwell and it’s pid
was 18744.
The signal is generated by the shell and sent to the OS, which then sends it
to the Shotwell application. The Shotwell application receives the signal and
should handle it appropriately. In this case, it should terminate and release
any resources it was using.
The keyboard is involved in this process, as we type the command in the
keyboard and press enter, so it creates a interrupt and the OS handle it.
The OS is responsible for managing signals and interrupting processes when
necessary. The shell is responsible for executing commands and managing the
input and output of the terminal. The Shotwell application is responsible for
handling the signals it receives and terminating when asked to do so.
5.	the ‘real time’ is the time of the physic world, or the time that took to
the process to run including the time of interruptions if there where.
The ‘virtual time’ is the time that a process run without considering the
interruptions and overhead including in the run.
example for ‘real time’: flight scheduler that needs to be aware to the
real-world time.
example for ‘virtual time’: a program that gets two processes and determine
which one of them is faster. It needs to use the virtual time to get precise
results.
